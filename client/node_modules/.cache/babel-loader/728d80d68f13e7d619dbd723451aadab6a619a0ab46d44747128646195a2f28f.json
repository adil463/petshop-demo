{"ast":null,"code":"var _jsxFileName = \"/workspace/petshop-demo/client/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport { Pages } from './pages';\nimport { ApolloClient, InMemoryCache, ApolloProvider, HttpLink, from } from \"@apollo/client\";\nimport { onError } from \"@apollo/client/link/error\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst httpLink = new HttpLink({\n  uri: \"http://localhost:4000\"\n  //uri: \"http://localhost:4000\"\n});\n\n// Log any GraphQL errors or network error that occurred\nconst errorLink = onError(_ref => {\n  let {\n    graphQLErrors,\n    networkError\n  } = _ref;\n  if (graphQLErrors) graphQLErrors.forEach(_ref2 => {\n    let {\n      message,\n      locations,\n      path\n    } = _ref2;\n    return console.log(`[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`);\n  });\n  if (networkError) console.log(`[Network error]: ${networkError}`);\n});\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: from([errorLink, httpLink])\n});\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render( /*#__PURE__*/_jsxDEV(ApolloProvider, {\n  client: client,\n  children: /*#__PURE__*/_jsxDEV(Pages, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 30,\n  columnNumber: 3\n}, this));","map":{"version":3,"names":["React","ReactDOM","Pages","ApolloClient","InMemoryCache","ApolloProvider","HttpLink","from","onError","jsxDEV","_jsxDEV","httpLink","uri","errorLink","_ref","graphQLErrors","networkError","forEach","_ref2","message","locations","path","console","log","client","cache","link","root","createRoot","document","getElementById","render","children","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/workspace/petshop-demo/client/src/index.js"],"sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport { Pages } from './pages';\nimport { ApolloClient, InMemoryCache, ApolloProvider,HttpLink, from } from \"@apollo/client\";\nimport { onError } from \"@apollo/client/link/error\";\n\nconst httpLink = new HttpLink({\n  uri: \"http://localhost:4000\"\n  //uri: \"http://localhost:4000\"\n});\n\n// Log any GraphQL errors or network error that occurred\nconst errorLink = onError(({ graphQLErrors, networkError }) => {\n  if (graphQLErrors)\n    graphQLErrors.forEach(({ message, locations, path }) =>\n      console.log(\n        `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`\n      )\n    );\n  if (networkError) console.log(`[Network error]: ${networkError}`);\n});\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: from([errorLink,httpLink])\n});\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <ApolloProvider client={client}>\n    <Pages />\n  </ApolloProvider>\n);\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,kBAAkB;AACvC,SAASC,KAAK,QAAQ,SAAS;AAC/B,SAASC,YAAY,EAAEC,aAAa,EAAEC,cAAc,EAACC,QAAQ,EAAEC,IAAI,QAAQ,gBAAgB;AAC3F,SAASC,OAAO,QAAQ,2BAA2B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpD,MAAMC,QAAQ,GAAG,IAAIL,QAAQ,CAAC;EAC5BM,GAAG,EAAE;EACL;AACF,CAAC,CAAC;;AAEF;AACA,MAAMC,SAAS,GAAGL,OAAO,CAACM,IAAA,IAAqC;EAAA,IAApC;IAAEC,aAAa;IAAEC;EAAa,CAAC,GAAAF,IAAA;EACxD,IAAIC,aAAa,EACfA,aAAa,CAACE,OAAO,CAACC,KAAA;IAAA,IAAC;MAAEC,OAAO;MAAEC,SAAS;MAAEC;IAAK,CAAC,GAAAH,KAAA;IAAA,OACjDI,OAAO,CAACC,GAAG,CACR,6BAA4BJ,OAAQ,eAAcC,SAAU,WAAUC,IAAK,EAAC,CAC9E;EAAA,EACF;EACH,IAAIL,YAAY,EAAEM,OAAO,CAACC,GAAG,CAAE,oBAAmBP,YAAa,EAAC,CAAC;AACnE,CAAC,CAAC;AAEF,MAAMQ,MAAM,GAAG,IAAIrB,YAAY,CAAC;EAC9BsB,KAAK,EAAE,IAAIrB,aAAa,EAAE;EAC1BsB,IAAI,EAAEnB,IAAI,CAAC,CAACM,SAAS,EAACF,QAAQ,CAAC;AACjC,CAAC,CAAC;AAEF,MAAMgB,IAAI,GAAG1B,QAAQ,CAAC2B,UAAU,CAACC,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC,CAAC;AACjEH,IAAI,CAACI,MAAM,eACTrB,OAAA,CAACL,cAAc;EAACmB,MAAM,EAAEA,MAAO;EAAAQ,QAAA,eAC7BtB,OAAA,CAACR,KAAK;IAAA+B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA;AAAG;EAAAH,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,QACM,CAClB"},"metadata":{},"sourceType":"module","externalDependencies":[]}