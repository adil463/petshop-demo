{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nimport { responseIterator } from \"./responseIterator.js\";\nimport { throwServerError } from \"../utils/index.js\";\nimport { PROTOCOL_ERRORS_SYMBOL } from \"../../errors/index.js\";\nimport { isApolloPayloadResult } from \"../../utilities/common/incrementalResult.js\";\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nexport function readMultipartBody(response, observer) {\n  var _a, _b, _c, _d;\n  return __awaiter(this, void 0, void 0, function () {\n    var decoder, contentType, delimiter, boundaryVal, boundary, buffer, iterator, running, _e, value, done, chunk, bi, message, i, headers, contentType_1, body, result, next;\n    var _f, _g;\n    return __generator(this, function (_h) {\n      switch (_h.label) {\n        case 0:\n          if (TextDecoder === undefined) {\n            throw new Error(\"TextDecoder must be defined in the environment: please import a polyfill.\");\n          }\n          decoder = new TextDecoder(\"utf-8\");\n          contentType = (_a = response.headers) === null || _a === void 0 ? void 0 : _a.get(\"content-type\");\n          delimiter = \"boundary=\";\n          boundaryVal = (contentType === null || contentType === void 0 ? void 0 : contentType.includes(delimiter)) ? contentType === null || contentType === void 0 ? void 0 : contentType.substring((contentType === null || contentType === void 0 ? void 0 : contentType.indexOf(delimiter)) + delimiter.length).replace(/['\"]/g, \"\").replace(/\\;(.*)/gm, \"\").trim() : \"-\";\n          boundary = \"--\".concat(boundaryVal);\n          buffer = \"\";\n          iterator = responseIterator(response);\n          running = true;\n          _h.label = 1;\n        case 1:\n          if (!running) return [3, 3];\n          return [4, iterator.next()];\n        case 2:\n          _e = _h.sent(), value = _e.value, done = _e.done;\n          chunk = typeof value === \"string\" ? value : decoder.decode(value);\n          running = !done;\n          buffer += chunk;\n          bi = buffer.indexOf(boundary);\n          while (bi > -1) {\n            message = void 0;\n            _f = [buffer.slice(0, bi), buffer.slice(bi + boundary.length)], message = _f[0], buffer = _f[1];\n            if (message.trim()) {\n              i = message.indexOf(\"\\r\\n\\r\\n\");\n              headers = parseHeaders(message.slice(0, i));\n              contentType_1 = headers[\"content-type\"];\n              if (contentType_1 && contentType_1.toLowerCase().indexOf(\"application/json\") === -1) {\n                throw new Error(\"Unsupported patch content type: application/json is required.\");\n              }\n              body = message.slice(i);\n              try {\n                result = parseJsonBody(response, body.replace(\"\\r\\n\", \"\"));\n                if (Object.keys(result).length > 1 || \"data\" in result || \"incremental\" in result || \"errors\" in result || \"payload\" in result) {\n                  if (isApolloPayloadResult(result)) {\n                    next = {};\n                    if (\"payload\" in result) {\n                      next = __assign({}, result.payload);\n                    }\n                    if (\"errors\" in result) {\n                      next = __assign(__assign({}, next), {\n                        extensions: __assign(__assign({}, \"extensions\" in next ? next.extensions : null), (_g = {}, _g[PROTOCOL_ERRORS_SYMBOL] = result.errors, _g))\n                      });\n                    }\n                    (_b = observer.next) === null || _b === void 0 ? void 0 : _b.call(observer, next);\n                  } else {\n                    (_c = observer.next) === null || _c === void 0 ? void 0 : _c.call(observer, result);\n                  }\n                }\n              } catch (err) {\n                handleError(err, observer);\n              }\n            }\n            bi = buffer.indexOf(boundary);\n          }\n          return [3, 1];\n        case 3:\n          (_d = observer.complete) === null || _d === void 0 ? void 0 : _d.call(observer);\n          return [2];\n      }\n    });\n  });\n}\nexport function parseHeaders(headerText) {\n  var headersInit = {};\n  headerText.split(\"\\n\").forEach(function (line) {\n    var i = line.indexOf(\":\");\n    if (i > -1) {\n      var name_1 = line.slice(0, i).trim().toLowerCase();\n      var value = line.slice(i + 1).trim();\n      headersInit[name_1] = value;\n    }\n  });\n  return headersInit;\n}\nexport function parseJsonBody(response, bodyText) {\n  if (response.status >= 300) {\n    var getResult = function () {\n      try {\n        return JSON.parse(bodyText);\n      } catch (err) {\n        return bodyText;\n      }\n    };\n    throwServerError(response, getResult(), \"Response not successful: Received status code \".concat(response.status));\n  }\n  try {\n    return JSON.parse(bodyText);\n  } catch (err) {\n    var parseError = err;\n    parseError.name = \"ServerParseError\";\n    parseError.response = response;\n    parseError.statusCode = response.status;\n    parseError.bodyText = bodyText;\n    throw parseError;\n  }\n}\nexport function handleError(err, observer) {\n  var _a, _b;\n  if (err.name === \"AbortError\") return;\n  if (err.result && err.result.errors && err.result.data) {\n    (_a = observer.next) === null || _a === void 0 ? void 0 : _a.call(observer, err.result);\n  }\n  (_b = observer.error) === null || _b === void 0 ? void 0 : _b.call(observer, err);\n}\nexport function readJsonBody(response, operation, observer) {\n  parseAndCheckHttpResponse(operation)(response).then(function (result) {\n    var _a, _b;\n    (_a = observer.next) === null || _a === void 0 ? void 0 : _a.call(observer, result);\n    (_b = observer.complete) === null || _b === void 0 ? void 0 : _b.call(observer);\n  }).catch(function (err) {\n    return handleError(err, observer);\n  });\n}\nexport function parseAndCheckHttpResponse(operations) {\n  return function (response) {\n    return response.text().then(function (bodyText) {\n      return parseJsonBody(response, bodyText);\n    }).then(function (result) {\n      if (response.status >= 300) {\n        throwServerError(response, result, \"Response not successful: Received status code \".concat(response.status));\n      }\n      if (!Array.isArray(result) && !hasOwnProperty.call(result, \"data\") && !hasOwnProperty.call(result, \"errors\")) {\n        throwServerError(response, result, \"Server response was missing for query '\".concat(Array.isArray(operations) ? operations.map(function (op) {\n          return op.operationName;\n        }) : operations.operationName, \"'.\"));\n      }\n      return result;\n    });\n  };\n}","map":{"version":3,"names":["responseIterator","throwServerError","PROTOCOL_ERRORS_SYMBOL","isApolloPayloadResult","hasOwnProperty","Object","prototype","readMultipartBody","response","observer","TextDecoder","undefined","Error","decoder","contentType","_a","headers","get","delimiter","boundaryVal","includes","substring","indexOf","length","replace","trim","boundary","concat","buffer","iterator","running","next","_e","_h","sent","value","done","chunk","decode","bi","message","_f","slice","i","parseHeaders","contentType_1","toLowerCase","body","result","parseJsonBody","keys","__assign","payload","extensions","_g","errors","_b","call","_c","err","handleError","_d","complete","headerText","headersInit","split","forEach","line","name_1","bodyText","status","getResult","JSON","parse","parseError","name","statusCode","data","error","readJsonBody","operation","parseAndCheckHttpResponse","then","catch","operations","text","Array","isArray","map","op","operationName"],"sources":["/workspace/petshop-demo/client/node_modules/@apollo/src/link/http/parseAndCheckHttpResponse.ts"],"sourcesContent":["import { responseIterator } from \"./responseIterator\";\nimport { Operation } from \"../core\";\nimport { throwServerError } from \"../utils\";\nimport { PROTOCOL_ERRORS_SYMBOL } from '../../errors';\nimport { Observer } from \"../../utilities\";\nimport {\n  isApolloPayloadResult\n} from '../../utilities/common/incrementalResult';\n\nconst { hasOwnProperty } = Object.prototype;\n\nexport type ServerParseError = Error & {\n  response: Response;\n  statusCode: number;\n  bodyText: string;\n};\n\nexport async function readMultipartBody<\n  T extends object = Record<string, unknown>\n>(response: Response, observer: Observer<T>) {\n  if (TextDecoder === undefined) {\n    throw new Error(\n      \"TextDecoder must be defined in the environment: please import a polyfill.\"\n    );\n  }\n  const decoder = new TextDecoder(\"utf-8\");\n  const contentType = response.headers?.get(\"content-type\");\n  const delimiter = \"boundary=\";\n\n  // parse boundary value and ignore any subsequent name/value pairs after ;\n  // https://www.rfc-editor.org/rfc/rfc9110.html#name-parameters\n  // e.g. multipart/mixed;boundary=\"graphql\";deferSpec=20220824\n  // if no boundary is specified, default to -\n  const boundaryVal = contentType?.includes(delimiter)\n    ? contentType\n        ?.substring(contentType?.indexOf(delimiter) + delimiter.length)\n        .replace(/['\"]/g, \"\")\n        .replace(/\\;(.*)/gm, \"\")\n        .trim()\n    : \"-\";\n\n  let boundary = `--${boundaryVal}`;\n  let buffer = \"\";\n  const iterator = responseIterator(response);\n  let running = true;\n\n  while (running) {\n    const { value, done } = await iterator.next();\n    const chunk = typeof value === \"string\" ? value : decoder.decode(value);\n    running = !done;\n    buffer += chunk;\n    let bi = buffer.indexOf(boundary);\n\n    while (bi > -1) {\n      let message: string;\n      [message, buffer] = [\n        buffer.slice(0, bi),\n        buffer.slice(bi + boundary.length),\n      ];\n      if (message.trim()) {\n        const i = message.indexOf(\"\\r\\n\\r\\n\");\n        const headers = parseHeaders(message.slice(0, i));\n        const contentType = headers[\"content-type\"];\n        if (\n          contentType &&\n          contentType.toLowerCase().indexOf(\"application/json\") === -1\n        ) {\n          throw new Error(\n            \"Unsupported patch content type: application/json is required.\"\n          );\n        }\n        const body = message.slice(i);\n\n        try {\n          const result = parseJsonBody<T>(response, body.replace(\"\\r\\n\", \"\"));\n          if (\n            Object.keys(result).length > 1 ||\n            \"data\" in result ||\n            \"incremental\" in result ||\n            \"errors\" in result ||\n            \"payload\" in result\n          ) {\n            if (isApolloPayloadResult(result)) {\n              let next = {};\n              if (\"payload\" in result) {\n                next = { ...result.payload };\n              }\n              if (\"errors\" in result) {\n                next = {\n                  ...next,\n                  extensions: {\n                    ...(\"extensions\" in next ? next.extensions : null as any),\n                    [PROTOCOL_ERRORS_SYMBOL]: result.errors\n                  },\n                };\n              }\n              observer.next?.(next as T);\n            } else {\n              // for the last chunk with only `hasNext: false`\n              // we don't need to call observer.next as there is no data/errors\n              observer.next?.(result);\n            }\n          }\n        } catch (err) {\n          handleError(err, observer);\n        }\n      }\n      bi = buffer.indexOf(boundary);\n    }\n  }\n  observer.complete?.();\n}\n\nexport function parseHeaders(headerText: string): Record<string, string> {\n  const headersInit: Record<string, string> = {};\n  headerText.split(\"\\n\").forEach((line) => {\n    const i = line.indexOf(\":\");\n    if (i > -1) {\n      // normalize headers to lowercase\n      const name = line.slice(0, i).trim().toLowerCase();\n      const value = line.slice(i + 1).trim();\n      headersInit[name] = value;\n    }\n  });\n  return headersInit;\n}\n\nexport function parseJsonBody<T>(response: Response, bodyText: string): T {\n  if (response.status >= 300) {\n    // Network error\n    const getResult = () => {\n      try {\n        return JSON.parse(bodyText);\n      } catch (err) {\n        return bodyText;\n      }\n    };\n    throwServerError(\n      response,\n      getResult(),\n      `Response not successful: Received status code ${response.status}`\n    );\n  }\n\n  try {\n    return JSON.parse(bodyText) as T;\n  } catch (err) {\n    const parseError = err as ServerParseError;\n    parseError.name = \"ServerParseError\";\n    parseError.response = response;\n    parseError.statusCode = response.status;\n    parseError.bodyText = bodyText;\n    throw parseError;\n  }\n}\n\nexport function handleError(err: any, observer: Observer<any>) {\n  if (err.name === \"AbortError\") return;\n  // if it is a network error, BUT there is graphql result info fire\n  // the next observer before calling error this gives apollo-client\n  // (and react-apollo) the `graphqlErrors` and `networkErrors` to\n  // pass to UI this should only happen if we *also* have data as\n  // part of the response key per the spec\n  if (err.result && err.result.errors && err.result.data) {\n    // if we don't call next, the UI can only show networkError\n    // because AC didn't get any graphqlErrors this is graphql\n    // execution result info (i.e errors and possibly data) this is\n    // because there is no formal spec how errors should translate to\n    // http status codes. So an auth error (401) could have both data\n    // from a public field, errors from a private field, and a status\n    // of 401\n    // {\n    //  user { // this will have errors\n    //    firstName\n    //  }\n    //  products { // this is public so will have data\n    //    cost\n    //  }\n    // }\n    //\n    // the result of above *could* look like this:\n    // {\n    //   data: { products: [{ cost: \"$10\" }] },\n    //   errors: [{\n    //      message: 'your session has timed out',\n    //      path: []\n    //   }]\n    // }\n    // status code of above would be a 401\n    // in the UI you want to show data where you can, errors as data where you can\n    // and use correct http status codes\n    observer.next?.(err.result);\n  }\n\n  observer.error?.(err);\n}\n\nexport function readJsonBody<T = Record<string, unknown>>(\n  response: Response,\n  operation: Operation,\n  observer: Observer<T>\n) {\n  parseAndCheckHttpResponse(operation)(response)\n    .then((result) => {\n      observer.next?.(result);\n      observer.complete?.();\n    })\n    .catch((err) => handleError(err, observer));\n}\n\nexport function parseAndCheckHttpResponse(operations: Operation | Operation[]) {\n  return (response: Response) =>\n    response\n      .text()\n      .then((bodyText) => parseJsonBody(response, bodyText))\n      .then((result: any) => {\n        if (response.status >= 300) {\n          // Network error\n          throwServerError(\n            response,\n            result,\n            `Response not successful: Received status code ${response.status}`\n          );\n        }\n        if (\n          !Array.isArray(result) &&\n          !hasOwnProperty.call(result, \"data\") &&\n          !hasOwnProperty.call(result, \"errors\")\n        ) {\n          // Data error\n          throwServerError(\n            response,\n            result,\n            `Server response was missing for query '${\n              Array.isArray(operations)\n                ? operations.map((op) => op.operationName)\n                : operations.operationName\n            }'.`\n          );\n        }\n        return result;\n      });\n}\n"],"mappings":";AAAA,SAASA,gBAAgB,QAAQ,uBAAqB;AAEtD,SAASC,gBAAgB,QAAQ,mBAAW;AAC5C,SAASC,sBAAsB,QAAQ,uBAAe;AAEtD,SACEC,qBAAqB,QAChB,6CAA2C;AAE1C,IAAAC,cAAc,GAAKC,MAAM,CAACC,SAAS,CAAAF,cAArB;AAQtB,OAAM,SAAgBG,iBAAiBA,CAErCC,QAAkB,EAAEC,QAAqB;;;;;;;;UACzC,IAAIC,WAAW,KAAKC,SAAS,EAAE;YAC7B,MAAM,IAAIC,KAAK,CACb,2EAA2E,CAC5E;;UAEGC,OAAO,GAAG,IAAIH,WAAW,CAAC,OAAO,CAAC;UAClCI,WAAW,GAAG,CAAAC,EAAA,GAAAP,QAAQ,CAACQ,OAAO,cAAAD,EAAA,uBAAAA,EAAA,CAAEE,GAAG,CAAC,cAAc,CAAC;UACnDC,SAAS,GAAG,WAAW;UAMvBC,WAAW,GAAG,CAAAL,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEM,QAAQ,CAACF,SAAS,CAAC,IAChDJ,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CACPO,SAAS,CAAC,CAAAP,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEQ,OAAO,CAACJ,SAAS,CAAC,IAAGA,SAAS,CAACK,MAAM,EAC7DC,OAAO,CAAC,OAAO,EAAE,EAAE,EACnBA,OAAO,CAAC,UAAU,EAAE,EAAE,EACtBC,IAAI,EAAE,GACT,GAAG;UAEHC,QAAQ,GAAG,KAAAC,MAAA,CAAKR,WAAW,CAAE;UAC7BS,MAAM,GAAG,EAAE;UACTC,QAAQ,GAAG7B,gBAAgB,CAACQ,QAAQ,CAAC;UACvCsB,OAAO,GAAG,IAAI;;;eAEXA,OAAO;UACY,WAAMD,QAAQ,CAACE,IAAI,EAAE;;UAAvCC,EAAA,GAAkBC,EAAA,CAAAC,IAAA,EAAqB,EAArCC,KAAK,GAAAH,EAAA,CAAAG,KAAA,EAAEC,IAAI,GAAAJ,EAAA,CAAAI,IAAA;UACbC,KAAK,GAAG,OAAOF,KAAK,KAAK,QAAQ,GAAGA,KAAK,GAAGtB,OAAO,CAACyB,MAAM,CAACH,KAAK,CAAC;UACvEL,OAAO,GAAG,CAACM,IAAI;UACfR,MAAM,IAAIS,KAAK;UACXE,EAAE,GAAGX,MAAM,CAACN,OAAO,CAACI,QAAQ,CAAC;UAEjC,OAAOa,EAAE,GAAG,CAAC,CAAC,EAAE;YACVC,OAAO,SAAQ;YACnBC,EAAA,GAAoB,CAClBb,MAAM,CAACc,KAAK,CAAC,CAAC,EAAEH,EAAE,CAAC,EACnBX,MAAM,CAACc,KAAK,CAACH,EAAE,GAAGb,QAAQ,CAACH,MAAM,CAAC,CACnC,EAHAiB,OAAO,GAAAC,EAAA,KAAEb,MAAM,GAAAa,EAAA;YAIhB,IAAID,OAAO,CAACf,IAAI,EAAE,EAAE;cACZkB,CAAC,GAAGH,OAAO,CAAClB,OAAO,CAAC,UAAU,CAAC;cAC/BN,OAAO,GAAG4B,YAAY,CAACJ,OAAO,CAACE,KAAK,CAAC,CAAC,EAAEC,CAAC,CAAC,CAAC;cAC3CE,aAAA,GAAc7B,OAAO,CAAC,cAAc,CAAC;cAC3C,IACE6B,aAAW,IACXA,aAAW,CAACC,WAAW,EAAE,CAACxB,OAAO,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC,EAC5D;gBACA,MAAM,IAAIV,KAAK,CACb,+DAA+D,CAChE;;cAEGmC,IAAI,GAAGP,OAAO,CAACE,KAAK,CAACC,CAAC,CAAC;cAE7B,IAAI;gBACIK,MAAM,GAAGC,aAAa,CAAIzC,QAAQ,EAAEuC,IAAI,CAACvB,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;gBACnE,IACEnB,MAAM,CAAC6C,IAAI,CAACF,MAAM,CAAC,CAACzB,MAAM,GAAG,CAAC,IAC9B,MAAM,IAAIyB,MAAM,IAChB,aAAa,IAAIA,MAAM,IACvB,QAAQ,IAAIA,MAAM,IAClB,SAAS,IAAIA,MAAM,EACnB;kBACA,IAAI7C,qBAAqB,CAAC6C,MAAM,CAAC,EAAE;oBAC7BjB,IAAI,GAAG,EAAE;oBACb,IAAI,SAAS,IAAIiB,MAAM,EAAE;sBACvBjB,IAAI,GAAAoB,QAAA,KAAQH,MAAM,CAACI,OAAO,CAAE;;oBAE9B,IAAI,QAAQ,IAAIJ,MAAM,EAAE;sBACtBjB,IAAI,GAAAoB,QAAA,CAAAA,QAAA,KACCpB,IAAI;wBACPsB,UAAU,EAAAF,QAAA,CAAAA,QAAA,KACJ,YAAY,IAAIpB,IAAI,GAAGA,IAAI,CAACsB,UAAU,GAAG,IAAW,CAAC,GAAAC,EAAA,OAAAA,EAAA,CACxDpD,sBAAsB,IAAG8C,MAAM,CAACO,MAAM,EAAAD,EAAA;sBAAA,EAE1C;;oBAEH,CAAAE,EAAA,GAAA/C,QAAQ,CAACsB,IAAI,cAAAyB,EAAA,uBAAAA,EAAA,CAAAC,IAAA,CAAAhD,QAAA,EAAGsB,IAAS,CAAC;mBAC3B,MAAM;oBAGL,CAAA2B,EAAA,GAAAjD,QAAQ,CAACsB,IAAI,cAAA2B,EAAA,uBAAAA,EAAA,CAAAD,IAAA,CAAAhD,QAAA,EAAGuC,MAAM,CAAC;;;eAG5B,CAAC,OAAOW,GAAG,EAAE;gBACZC,WAAW,CAACD,GAAG,EAAElD,QAAQ,CAAC;;;YAG9B8B,EAAE,GAAGX,MAAM,CAACN,OAAO,CAACI,QAAQ,CAAC;;;;UAGjC,CAAAmC,EAAA,GAAApD,QAAQ,CAACqD,QAAQ,cAAAD,EAAA,uBAAAA,EAAA,CAAAJ,IAAA,CAAAhD,QAAA,CAAI;;;;;;AAGvB,OAAM,SAAUmC,YAAYA,CAACmB,UAAkB;EAC7C,IAAMC,WAAW,GAA2B,EAAE;EAC9CD,UAAU,CAACE,KAAK,CAAC,IAAI,CAAC,CAACC,OAAO,CAAC,UAACC,IAAI;IAClC,IAAMxB,CAAC,GAAGwB,IAAI,CAAC7C,OAAO,CAAC,GAAG,CAAC;IAC3B,IAAIqB,CAAC,GAAG,CAAC,CAAC,EAAE;MAEV,IAAMyB,MAAI,GAAGD,IAAI,CAACzB,KAAK,CAAC,CAAC,EAAEC,CAAC,CAAC,CAAClB,IAAI,EAAE,CAACqB,WAAW,EAAE;MAClD,IAAMX,KAAK,GAAGgC,IAAI,CAACzB,KAAK,CAACC,CAAC,GAAG,CAAC,CAAC,CAAClB,IAAI,EAAE;MACtCuC,WAAW,CAACI,MAAI,CAAC,GAAGjC,KAAK;;EAE7B,CAAC,CAAC;EACF,OAAO6B,WAAW;AACpB;AAEA,OAAM,SAAUf,aAAaA,CAAIzC,QAAkB,EAAE6D,QAAgB;EACnE,IAAI7D,QAAQ,CAAC8D,MAAM,IAAI,GAAG,EAAE;IAE1B,IAAMC,SAAS,GAAG,SAAAA,CAAA;MAChB,IAAI;QACF,OAAOC,IAAI,CAACC,KAAK,CAACJ,QAAQ,CAAC;OAC5B,CAAC,OAAOV,GAAG,EAAE;QACZ,OAAOU,QAAQ;;IAEnB,CAAC;IACDpE,gBAAgB,CACdO,QAAQ,EACR+D,SAAS,EAAE,EACX,iDAAA5C,MAAA,CAAiDnB,QAAQ,CAAC8D,MAAM,CAAE,CACnE;;EAGH,IAAI;IACF,OAAOE,IAAI,CAACC,KAAK,CAACJ,QAAQ,CAAM;GACjC,CAAC,OAAOV,GAAG,EAAE;IACZ,IAAMe,UAAU,GAAGf,GAAuB;IAC1Ce,UAAU,CAACC,IAAI,GAAG,kBAAkB;IACpCD,UAAU,CAAClE,QAAQ,GAAGA,QAAQ;IAC9BkE,UAAU,CAACE,UAAU,GAAGpE,QAAQ,CAAC8D,MAAM;IACvCI,UAAU,CAACL,QAAQ,GAAGA,QAAQ;IAC9B,MAAMK,UAAU;;AAEpB;AAEA,OAAM,SAAUd,WAAWA,CAACD,GAAQ,EAAElD,QAAuB;;EAC3D,IAAIkD,GAAG,CAACgB,IAAI,KAAK,YAAY,EAAE;EAM/B,IAAIhB,GAAG,CAACX,MAAM,IAAIW,GAAG,CAACX,MAAM,CAACO,MAAM,IAAII,GAAG,CAACX,MAAM,CAAC6B,IAAI,EAAE;IA4BtD,CAAA9D,EAAA,GAAAN,QAAQ,CAACsB,IAAI,cAAAhB,EAAA,uBAAAA,EAAA,CAAA0C,IAAA,CAAAhD,QAAA,EAAGkD,GAAG,CAACX,MAAM,CAAC;;EAG7B,CAAAQ,EAAA,GAAA/C,QAAQ,CAACqE,KAAK,cAAAtB,EAAA,uBAAAA,EAAA,CAAAC,IAAA,CAAAhD,QAAA,EAAGkD,GAAG,CAAC;AACvB;AAEA,OAAM,SAAUoB,YAAYA,CAC1BvE,QAAkB,EAClBwE,SAAoB,EACpBvE,QAAqB;EAErBwE,yBAAyB,CAACD,SAAS,CAAC,CAACxE,QAAQ,CAAC,CAC3C0E,IAAI,CAAC,UAAClC,MAAM;;IACX,CAAAjC,EAAA,GAAAN,QAAQ,CAACsB,IAAI,cAAAhB,EAAA,uBAAAA,EAAA,CAAA0C,IAAA,CAAAhD,QAAA,EAAGuC,MAAM,CAAC;IACvB,CAAAQ,EAAA,GAAA/C,QAAQ,CAACqD,QAAQ,cAAAN,EAAA,uBAAAA,EAAA,CAAAC,IAAA,CAAAhD,QAAA,CAAI;EACvB,CAAC,CAAC,CACD0E,KAAK,CAAC,UAACxB,GAAG;IAAK,OAAAC,WAAW,CAACD,GAAG,EAAElD,QAAQ,CAAC;EAA1B,CAA0B,CAAC;AAC/C;AAEA,OAAM,SAAUwE,yBAAyBA,CAACG,UAAmC;EAC3E,OAAO,UAAC5E,QAAkB;IACxB,OAAAA,QAAQ,CACL6E,IAAI,EAAE,CACNH,IAAI,CAAC,UAACb,QAAQ;MAAK,OAAApB,aAAa,CAACzC,QAAQ,EAAE6D,QAAQ,CAAC;IAAjC,CAAiC,CAAC,CACrDa,IAAI,CAAC,UAAClC,MAAW;MAChB,IAAIxC,QAAQ,CAAC8D,MAAM,IAAI,GAAG,EAAE;QAE1BrE,gBAAgB,CACdO,QAAQ,EACRwC,MAAM,EACN,iDAAArB,MAAA,CAAiDnB,QAAQ,CAAC8D,MAAM,CAAE,CACnE;;MAEH,IACE,CAACgB,KAAK,CAACC,OAAO,CAACvC,MAAM,CAAC,IACtB,CAAC5C,cAAc,CAACqD,IAAI,CAACT,MAAM,EAAE,MAAM,CAAC,IACpC,CAAC5C,cAAc,CAACqD,IAAI,CAACT,MAAM,EAAE,QAAQ,CAAC,EACtC;QAEA/C,gBAAgB,CACdO,QAAQ,EACRwC,MAAM,EACN,0CAAArB,MAAA,CACE2D,KAAK,CAACC,OAAO,CAACH,UAAU,CAAC,GACrBA,UAAU,CAACI,GAAG,CAAC,UAACC,EAAE;UAAK,OAAAA,EAAE,CAACC,aAAa;QAAhB,CAAgB,CAAC,GACxCN,UAAU,CAACM,aAAa,OAC1B,CACL;;MAEH,OAAO1C,MAAM;IACf,CAAC,CAAC;EA7BJ,CA6BI;AACR"},"metadata":{},"sourceType":"module","externalDependencies":[]}