{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\victo\\\\MGIS445\\\\apollo-petshop\\\\client\\\\src\\\\pets.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useQuery, gql } from \"@apollo/client\";\nimport { PetCard } from './pet-card';\nimport { Grid } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GET_PETS = gql`\nquery Pets {\n  pets { \n    petname\n    petprice\n    id\n    petphoto\n    pettype\n  }\n}`;\n\n/**\r\n * Quotes Page is the Catstronauts home page.\r\n * We display a grid of tracks fetched with useQuery with the TRACKS query\r\n */\nexport const Pets = () => {\n  _s();\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_PETS);\n  if (loading) return \"Loading...\";\n  if (error) return `Error! ${error.message}`;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    container: true,\n    children: /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Here be Pets \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\n_s(Pets, \"OQZiY3KqWoytFPIJWw/H9Hrmbok=\", false, function () {\n  return [useQuery];\n});\n_c = Pets;\nvar _c;\n$RefreshReg$(_c, \"Pets\");","map":{"version":3,"names":["React","useQuery","gql","PetCard","Grid","jsxDEV","_jsxDEV","GET_PETS","Pets","_s","loading","error","data","message","container","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/victo/MGIS445/apollo-petshop/client/src/pets.js"],"sourcesContent":["import React from 'react';\r\nimport { useQuery, gql } from \"@apollo/client\";\r\nimport { PetCard } from './pet-card';\r\nimport { Grid } from '@mui/material'\r\n\r\nconst GET_PETS = gql`\r\nquery Pets {\r\n  pets { \r\n    petname\r\n    petprice\r\n    id\r\n    petphoto\r\n    pettype\r\n  }\r\n}`\r\n\r\n\r\n/**\r\n * Quotes Page is the Catstronauts home page.\r\n * We display a grid of tracks fetched with useQuery with the TRACKS query\r\n */\r\nexport const Pets = () => {\r\n  const { loading, error, data } = useQuery(GET_PETS);\r\n\r\n  if (loading) return \"Loading...\";\r\n\r\n  if (error) return `Error! ${error.message}`;\r\n\r\n  return (\r\n    <div container>\r\n      <h3>Here be Pets </h3>\r\n      {/* /* //   {data?.pets?.map((pet) => (\r\n    //     <PetCard key={pet.id} pet={pet} />\r\n    //   ))}\r\n */}\r\n    </div>\r\n  );\r\n};\r\n\r\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,EAAEC,GAAG,QAAQ,gBAAgB;AAC9C,SAASC,OAAO,QAAQ,YAAY;AACpC,SAASC,IAAI,QAAQ,eAAe;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEpC,MAAMC,QAAQ,GAAGL,GAAI;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;;AAGF;AACA;AACA;AACA;AACA,OAAO,MAAMM,IAAI,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAM;IAAEC,OAAO;IAAEC,KAAK;IAAEC;EAAK,CAAC,GAAGX,QAAQ,CAACM,QAAQ,CAAC;EAEnD,IAAIG,OAAO,EAAE,OAAO,YAAY;EAEhC,IAAIC,KAAK,EAAE,OAAQ,UAASA,KAAK,CAACE,OAAQ,EAAC;EAE3C,oBACEP,OAAA;IAAKQ,SAAS;IAAAC,QAAA,eACZT,OAAA;MAAAS,QAAA,EAAI;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAK;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAKlB;AAEV,CAAC;AAACV,EAAA,CAhBWD,IAAI;EAAA,QACkBP,QAAQ;AAAA;AAAAmB,EAAA,GAD9BZ,IAAI;AAAA,IAAAY,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}